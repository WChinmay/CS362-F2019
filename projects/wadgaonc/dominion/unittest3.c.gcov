        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function myAssert called 0 returned 0% blocks executed 0%
    #####:    8:int myAssert()
        -:    9:{
    #####:   10:    return 1;
        -:   11:}
function main called 2 returned 100% blocks executed 79%
        2:   12:int main()
        -:   13:{
        -:   14:    // set your card array
        2:   15:    int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall };
        -:   16:
        -:   17:    // declare the game state
        -:   18:    struct gameState G;
        2:   19:    int seed = 9769;
        -:   20:
        2:   21:    printf("Begin Testing handleAmbassador():\n");
call    0 returned 100%
        -:   22:
        2:   23:    memset(&G, 23, sizeof(struct gameState));
        -:   24:    // set the game state
        2:   25:    int r = initializeGame(2, k, seed, &G);
call    0 returned 100%
        -:   26:    // initialize a new game
        -:   27:
        -:   28:    // set any other variables
        -:   29:    // int card = G.hand[currentPlayer][choice1]
        2:   30:    int choice1 = 0;
        2:   31:    int card = G.hand[0][choice1];
        2:   32:    int test1 = G.supplyCount[choice1];
        2:   33:    printf("Supply count for card is %d\n", G.supplyCount[choice1]);
call    0 returned 100%
        -:   34:    // call the refactored function
        2:   35:    int r1 = handleAmbassador(&G, choice1, 0, 0, 2);
call    0 returned 100%
        2:   36:    int test2 = G.supplyCount[choice1];
        2:   37:    printf("Supply count for card is %d\n", G.supplyCount[choice1]);
call    0 returned 100%
        -:   38:    // check if supplyCount decrements by one since Ambassador is trashed and nothing should be
        -:   39:    // gained for current player
        2:   40:    if (test1 == test2 - 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   41:    {
    #####:   42:        myAssert();
call    0 never executed
    #####:   43:        printf("Unit test passed!\n");
call    0 never executed
        -:   44:    }
        -:   45:    else
        -:   46:    {
        2:   47:        printf("Unit test failed :(\n");
call    0 returned 100%
        -:   48:    }
        -:   49:    // set any other variables
        2:   50:    test1 = G.handCount[0];
        2:   51:    choice1 = 3;
        2:   52:    int choice2 = 2;
        -:   53:    // call the refactored function
        2:   54:    int r2 = handleAmbassador(&G, choice1, choice2, 0, 2);
call    0 returned 100%
        2:   55:    test2 = G.handCount[0];
        -:   56:    // The number of discarded cards should be equal to choice2 since 
        -:   57:    // choice2 is the number of max discards.
        2:   58:    if (test1 == test2 - choice2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   59:    {
    #####:   60:        myAssert();
call    0 never executed
    #####:   61:        printf("Unit test passed!\n");
call    0 never executed
        -:   62:    }
        -:   63:    else
        -:   64:    {
        2:   65:        printf("Unit test failed :(\n");
call    0 returned 100%
        -:   66:    }
        -:   67:    // calls for coverage
        2:   68:    G.handCount[0] = 5;
        2:   69:    G.hand[0][0] = G.hand[0][choice1];
        2:   70:    int r3 = handleAmbassador(&G, choice1, choice2, 0, 4);
call    0 returned 100%
        2:   71:    int r4 = handleAmbassador(&G, choice1, -1, 0, 4);
call    0 returned 100%
        2:   72:    printf("Test completed!\n");
call    0 returned 100%
        -:   73:}
