        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function myAssert called 0 returned 0% blocks executed 0%
    #####:    8:int myAssert()
        -:    9:{
    #####:   10:    return 1;
        -:   11:}
function main called 1 returned 100% blocks executed 86%
        1:   12:int main()
        -:   13:{
        -:   14:    // set your card array
        1:   15:    int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall };
        -:   16:
        -:   17:    // declare the game state
        -:   18:    struct gameState G;
        1:   19:    int seed = 9769;
        -:   20:
        1:   21:    printf("Begin Testing handleBaron():\n");
call    0 returned 100%
        -:   22:
        1:   23:    memset(&G, 23, sizeof(struct gameState));
        -:   24:    // set the game state
        1:   25:    int r = initializeGame(2, k, seed, &G);
call    0 returned 100%
        -:   26:    // initialize a new game
        -:   27:
        -:   28:    // set any other variables
        1:   29:    int test1 = G.numBuys;
        1:   30:    printf("Num buys is %d\n", G.numBuys);
call    0 returned 100%
        -:   31:    // call the refactored function
        1:   32:    int r1 = handleBaron(&G, 0, 0);
call    0 returned 100%
        1:   33:    int test2 = G.numBuys;
        1:   34:    printf("Num buys is %d\n", G.numBuys);
call    0 returned 100%
        -:   35:    // check if numBuys incremented by 1 after one call to handleBaron
        1:   36:    if (test1 == test2 -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   37:    {
    #####:   38:        myAssert();
call    0 never executed
    #####:   39:        printf("Unit test passed!\n");
call    0 never executed
        -:   40:    }
        -:   41:    else
        -:   42:    {
        1:   43:        printf("Unit test failed :(\n");
call    0 returned 100%
        -:   44:    }
        -:   45:
        -:   46:    // call the refactored function
        1:   47:    int r2 = handleBaron(&G, 1, 0);
call    0 returned 100%
        -:   48:
        -:   49:    // Second unit test could only be solved by changing a hardcoded value for card_not_discarded
        -:   50:    // in dominion.c. 
        -:   51:
        -:   52:    // set any other variables
        -:   53:    // changing values to achieve coverage
        1:   54:    G.supplyCount[estate] = 2;
        1:   55:    G.handCount[0] = -1;
        -:   56:
        -:   57:    // call the refactored function
        1:   58:    int r3 = handleBaron(&G, 1, 0);
call    0 returned 100%
        1:   59:    printf("Test completed!\n");
call    0 returned 100%
        -:   60:}
