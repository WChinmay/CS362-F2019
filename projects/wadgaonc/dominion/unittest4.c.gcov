        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function myAssert called 0 returned 0% blocks executed 0%
    #####:    8:int myAssert()
        -:    9:{
    #####:   10:    return 1;
        -:   11:}
function main called 2 returned 100% blocks executed 82%
        2:   12:int main()
        -:   13:{
        -:   14:    // set your card array
        2:   15:    int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall };
        -:   16:
        -:   17:    // declare the game state
        -:   18:    struct gameState G;
        2:   19:    int seed = 9769;
        -:   20:
        2:   21:    printf("Begin Testing handleTribute():\n");
call    0 returned 100%
        -:   22:
        2:   23:    memset(&G, 23, sizeof(struct gameState));
        -:   24:    // set the game state
        2:   25:    int r = initializeGame(2, k, seed, &G);
call    0 returned 100%
        -:   26:    // initialize a new game
        -:   27:
        -:   28:    // set any other variables
        2:   29:    int tributeRevealedCards[2] = {copper, province};
        2:   30:    int test1 = G.coins;
        2:   31:    printf("Num coins is %d\n", G.coins);
call    0 returned 100%
        -:   32:    // call the refactored function
        -:   33:    // This unit test checks if the number of coins increments by 2 for each treasure card
        2:   34:    int r1 = handleTribute(&G, 1, 0, tributeRevealedCards);
call    0 returned 100%
        2:   35:    int test2 = G.coins;
        2:   36:    printf("Num coins is %d\n", G.coins);
call    0 returned 100%
        2:   37:    if (test1 == test2 - 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   38:    {
    #####:   39:        myAssert();
call    0 never executed
    #####:   40:        printf("Unit test passed!\n");
call    0 never executed
        -:   41:    }
        -:   42:    else
        -:   43:    {
        2:   44:        printf("Unit test failed :(\n");
call    0 returned 100%
        -:   45:    }
        -:   46:
        2:   47:    test1 = G.handCount[0];
        2:   48:    printf("Handcount for player 0 is %d\n", G.handCount[0]);
call    0 returned 100%
        -:   49:    // call the refactored function
        -:   50:    // this unit test checks if current player draws two cards for a action card
        2:   51:    int r2 = handleTribute(&G, 1, 0, tributeRevealedCards);
call    0 returned 100%
        2:   52:    test2 = G.handCount[0];
        2:   53:    printf("Handcount for player 0 is %d\n", G.handCount[0]);
call    0 returned 100%
        2:   54:    if (test1 == test2 - 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   55:    {
    #####:   56:        myAssert();
call    0 never executed
    #####:   57:        printf("Unit test passed!\n");
call    0 never executed
        -:   58:    }
        -:   59:    else
        -:   60:    {
        2:   61:        printf("Unit test failed :(\n");
call    0 returned 100%
        -:   62:    }
        -:   63:    // for code coverage
        2:   64:    G.deckCount[1] = 1;
        2:   65:    int r3 = handleTribute(&G, 1, 0, tributeRevealedCards);
call    0 returned 100%
        2:   66:    G.discardCount[1] = 0;
        2:   67:    G.deckCount[1] = 0;
        2:   68:    int r4 = handleTribute(&G, 1, 0, tributeRevealedCards);
call    0 returned 100%
        2:   69:    G.discardCount[1] = 1;
        2:   70:    int r5 = handleTribute(&G, 1, 0, tributeRevealedCards);
call    0 returned 100%
        2:   71:    printf("Test completed!\n");
call    0 returned 100%
        -:   72:}
