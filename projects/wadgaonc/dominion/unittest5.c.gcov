        -:    0:Source:unittest5.c
        -:    0:Graph:unittest5.gcno
        -:    0:Data:unittest5.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function myAssert called 0 returned 0% blocks executed 0%
    #####:    8:int myAssert()
        -:    9:{
    #####:   10:    return 1;
        -:   11:}
function main called 2 returned 100% blocks executed 76%
        2:   12:int main()
        -:   13:{
        -:   14:    // set your card array
        2:   15:    int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall };
        -:   16:
        -:   17:    // declare the game state
        -:   18:    struct gameState G;
        2:   19:    int seed = 9769;
        -:   20:
        2:   21:    printf("Begin Testing handleMine():\n");
call    0 returned 100%
        -:   22:
        2:   23:    memset(&G, 23, sizeof(struct gameState));
        -:   24:    // set the game state
        2:   25:    int r = initializeGame(2, k, seed, &G);
call    0 returned 100%
        -:   26:    // initialize a new game
        -:   27:
        -:   28:    // set any other variables
        2:   29:    int test1 = 3;
        2:   30:    int choice1 = 0;
        -:   31:    // gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -:   32:    // gainCard(choice2+3, state, 2, currentPlayer);
        -:   33:    // handleMine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   34:    // call the refactored function
        -:   35:    // This unit test checks if the card indicated by supplyPos is added to the discard pile
        -:   36:    // of the current player
        2:   37:    printf("supplyPos is %d\n", test1);
call    0 returned 100%
        2:   38:    int r1 = handleMine(&G, choice1, test1, 0, 0);
call    0 returned 100%
        2:   39:    printf("supplyPos is %d\n", G.hand[0][G.handCount[0]-1]);
call    0 returned 100%
        2:   40:    int test2 = G.hand[0][G.handCount[0]-1];
        2:   41:    if (test1 == test2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   42:    {
    #####:   43:        myAssert();
call    0 never executed
    #####:   44:        printf("Unit test passed!\n");
call    0 never executed
        -:   45:    }
        -:   46:    else
        -:   47:    {
        2:   48:        printf("Unit test failed :(\n");
call    0 returned 100%
        -:   49:    }
        2:   50:    G.handCount[0] = 3;
        2:   51:    test1 = G.handCount[0];
        2:   52:    G.hand[0][1] = G.hand[0][choice1];
        2:   53:    G.hand[0][2] = G.hand[0][choice1];
        2:   54:    int r2 = handleMine(&G, choice1, test1, 0, 0);
call    0 returned 100%
        2:   55:    test2 = G.handCount[0];
        -:   56:    // This unit test checks if all 1 card which is similar is discarded and not all of them
        2:   57:    if (test2 == test1 - 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   58:    {
    #####:   59:        myAssert();
call    0 never executed
    #####:   60:        printf("Unit test passed!\n");
call    0 never executed
        -:   61:    }
        -:   62:    else
        -:   63:    {
        2:   64:        printf("Unit test failed :(\n");
call    0 returned 100%
        -:   65:    }
        -:   66:
        2:   67:    printf("Test completed!\n");
call    0 returned 100%
        -:   68:}
